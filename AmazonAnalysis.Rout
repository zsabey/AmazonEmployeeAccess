
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##Libraries
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> 
> trainCsv <- read_csv("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> testCsv <- read_csv("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> trainCsv <- trainCsv %>%
+   mutate(ACTION = as.factor(ACTION))
> 
> ##Recipe
> my_recipe <- recipe(ACTION ~ ., data=trainCsv) %>%
+ step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))# combines categorical values that occur <5% into an "other" value
>   #step_dummy(all_nominal_predictors())
> 
> 
> penReg_recipe <- recipe(ACTION ~ ., data=trainCsv) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>% # turn all numeric features into factors
+   step_other(all_nominal_predictors(), threshold = .001) %>% # combines categorical values that occur <5% into an "other" value
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION))
> #%>% # dummy variable encoding
>  # step_lencode_mixed(all_nominal_predictors(), outcome = vars(target_var)) #target encoding
> # also step_lencode_glm() and step_lencode_bayes()
> 
> 
> # NOTE: some of these step functions are not appropriate to use together
> 
> # apply the recipe to your data
> prep <- prep(my_recipe)
> baked <- bake(prep, new_data = NULL)
> baked
# A tibble: 32,769 × 10
   RESOURCE MGR_ID ROLE_ROLLUP_1 ROLE_ROLLUP_2 ROLE_DEPTNAME ROLE_TITLE
      <dbl>  <dbl>         <dbl>         <dbl>         <dbl>      <dbl>
 1    -2.72  -5.33         -2.93         -3.08         -3.18      -3.40
 2    -2.72  -2.76         -2.93         -3.43         -2.19      -3.27
 3    -2.72  -2.76         -2.46         -2.47         -2.50      -2.10
 4    -2.72  -5.39         -2.93         -3.43         -4.19      -2.45
 5    -2.72  -2.76         -2.62         -2.07         -1.36      -2.05
 6    -2.72  -2.76         -2.67         -2.67         -2.13      -2.53
 7    -3.03  -2.76         -2.93         -3.43         -2.41      -2.60
 8    -2.72  -2.76         -2.93         -2.56         -3.26      -2.75
 9    -2.72  -2.76         -2.93         -3.28         -3.10      -2.38
10    -2.72  -2.76         -1.51         -1.53         -2.72      -2.10
# ℹ 32,759 more rows
# ℹ 4 more variables: ROLE_FAMILY_DESC <dbl>, ROLE_FAMILY <dbl>,
#   ROLE_CODE <dbl>, ACTION <fct>
> 
> ##Logistic Regression workflow
> my_mod <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> 
> logReg_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(my_mod) %>%
+   fit(data = trainCsv) # Fit the workflow
> 
> logReg_predictions <- predict(logReg_workflow,
+                               new_data=testCsv,
+                               type="prob") # "class" or "prob" (see doc)
> 
> 
> ##Penalized Logistic Regression
> my_mod <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> penalized_workflow <- workflow() %>%
+   add_recipe(penReg_recipe) %>%
+   add_model(my_mod)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 10) ## L^2 total tuning possibilities
> tuning_grid
# A tibble: 100 × 2
         penalty mixture
           <dbl>   <dbl>
 1 0.0000000001        0
 2 0.00000000129       0
 3 0.0000000167        0
 4 0.000000215         0
 5 0.00000278          0
 6 0.0000359           0
 7 0.000464            0
 8 0.00599             0
 9 0.0774              0
10 1                   0
# ℹ 90 more rows
> 
> ## Split data for CV
> folds <- vfold_cv(trainCsv, v = 3, repeats=1)
> 
> ## Run the CV
> CV_results <- penalized_workflow %>%
+   tune_grid(resamples=folds,
+           grid=tuning_grid,
+           metrics=metric_set(roc_auc, f_meas, sens, recall, spec,
+                              precision, accuracy)) #Or leave metrics NULL
→ A | warning: Model failed to converge with max|grad| = 0.174336 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?
There were issues with some computations   A: x1
→ B | warning: While computing binary `precision()`, no predicted events were detected (i.e. `true_positive + false_positive = 0`). 
               Precision is undefined in this case, and `NA` will be returned.
               Note that 624 true event(s) actually occured for the problematic event level, '0'.
There were issues with some computations   A: x1There were issues with some computations   A: x1   B: x1
→ C | warning: While computing binary `precision()`, no predicted events were detected (i.e. `true_positive + false_positive = 0`). 
               Precision is undefined in this case, and `NA` will be returned.
               Note that 627 true event(s) actually occured for the problematic event level, '0'.
There were issues with some computations   A: x1   B: x1There were issues with some computations   A: x1   B: x1   C: x1
→ D | warning: While computing binary `precision()`, no predicted events were detected (i.e. `true_positive + false_positive = 0`). 
               Precision is undefined in this case, and `NA` will be returned.
               Note that 646 true event(s) actually occured for the problematic event level, '0'.
There were issues with some computations   A: x1   B: x1   C: x1There were issues with some computations   A: x1   B: x1   C: x1   D: x1
There were issues with some computations   A: x1   B: x1   C: x1   D: x1

> 
> ## Plot Results (example)
> collect_metrics(CV_results) %>% # Gathers metrics into DF
+   filter(.metric=="roc_auc") %>%
+   ggplot(data=., aes(x=penalty, y=mean, color=factor(mixture))) +
+   geom_line()
> 
> collect_metrics(CV_results)
# A tibble: 700 × 8
         penalty mixture .metric   .estimator   mean     n  std_err .config     
           <dbl>   <dbl> <chr>     <chr>       <dbl> <int>    <dbl> <chr>       
 1 0.0000000001        0 accuracy  binary     0.942      3 0.00124  Preprocesso…
 2 0.0000000001        0 f_meas    binary     0.113      3 0.00172  Preprocesso…
 3 0.0000000001        0 precision binary     0.526      3 0.0425   Preprocesso…
 4 0.0000000001        0 recall    binary     0.0632     3 0.00176  Preprocesso…
 5 0.0000000001        0 roc_auc   binary     0.784      3 0.00437  Preprocesso…
 6 0.0000000001        0 sens      binary     0.0632     3 0.00176  Preprocesso…
 7 0.0000000001        0 spec      binary     0.996      3 0.000809 Preprocesso…
 8 0.00000000129       0 accuracy  binary     0.942      3 0.00124  Preprocesso…
 9 0.00000000129       0 f_meas    binary     0.113      3 0.00172  Preprocesso…
10 0.00000000129       0 precision binary     0.526      3 0.0425   Preprocesso…
# ℹ 690 more rows
> 
> CV_results
# Tuning results
# 3-fold cross-validation 
# A tibble: 3 × 4
  splits                id    .metrics           .notes          
  <list>                <chr> <list>             <list>          
1 <split [21846/10923]> Fold1 <tibble [700 × 6]> <tibble [2 × 3]>
2 <split [21846/10923]> Fold2 <tibble [700 × 6]> <tibble [1 × 3]>
3 <split [21846/10923]> Fold3 <tibble [700 × 6]> <tibble [1 × 3]>

There were issues with some computations:

  - Warning(s) x1: Model failed to converge with max|grad| = 0.174336 (tol = 0.002, ...
  - Warning(s) x1: While computing binary `precision()`, no predicted events were de...
  - Warning(s) x1: While computing binary `precision()`, no predicted events were de...
  - Warning(s) x1: While computing binary `precision()`, no predicted events were de...

Run `show_notes(.Last.tune.result)` for more information.
> ## Find Best Tuning Parameters
> bestTune <- CV_results %>%
+   select_best("roc_auc")
> bestTune
# A tibble: 1 × 3
  penalty mixture .config               
    <dbl>   <dbl> <chr>                 
1 0.00599   0.222 Preprocessor1_Model028
> 
> ## Finalize the Workflow & fit it
> final_wf <- penalized_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=trainCsv)
> 
> penalized_predictions <- final_wf %>%
+   predict(new_data = testCsv,
+           type = "prob")
> 
> 
> ##Prep for submission
> 
> Sub1 <- logReg_predictions %>% 
+   bind_cols(testCsv) %>% 
+   select(id,.pred_1) %>%
+   rename(Id= id, Action = .pred_1)
> 
> 
> Sub2 <- penalized_predictions %>% 
+   bind_cols(testCsv) %>% 
+   select(id,.pred_1) %>%
+   rename(Id= id, Action = .pred_1)
> 
> 
> write_csv(Sub1, "LogRegSubmission.csv")
> 
> write_csv(Sub2, "PenRegSubmission.csv")
> 
> proc.time()
   user  system elapsed 
268.854   1.697 141.533 
